{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/contacts/contacts-selectors.js","redux/contacts/contacts-operations.js","redux/auth/auth-operations.js","redux/auth/auth-selectors.js","redux/auth/auth-slice.js","redux/store.js","components/PrivateRoute/PrivateRoute.jsx","components/PublicRoute/PublicRoute.jsx","components/Navigation/Navigation.jsx","components/AuthNav/AuthNav.jsx","components/UserMenu/UserMenu.jsx","components/AppBar/AppBar.jsx","App.js","index.js"],"names":["fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","items","createReducer","state","payload","filter","id","_","loading","combineReducers","getAllContacts","contacts","getLoading","getFilter","getVisibleContacts","createSelector","normalizedFilterName","toLowerCase","trim","name","includes","fetchContacts","dispatch","a","get","data","addContact","number","contact","post","then","catch","error","deleteContact","delete","token","headers","common","Authorization","register","createAsyncThunk","credentials","console","log","message","login","logOut","getCurrentUser","thunkAPI","persistedToken","getState","auth","rejectWithValue","authOperations","authSelectors","getIsLoggedIn","isLoggedIn","getUserName","user","getIsFetchingCurrent","isFetchingCurrentUser","authSlice","createSlice","initialState","email","extraReducers","fulfilled","action","pending","rejected","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","persistReducer","authReducer","contactsReducer","devTools","process","persistor","persistStore","PrivateRoute","children","redirectTo","routeProps","useSelector","to","PublicRoute","restricted","shouldRedirect","Navigation","exact","className","activeStyle","color","AuthNav","UserMenu","useDispatch","onClick","AppBar","HomeView","lazy","RegisterView","LoginView","ContactsView","App","useEffect","fallback","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.717d077e.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactsRequest = createAction('contacts/fetchContactsRequest');\r\nexport const fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import { v4 as uuidv4 } from 'uuid'; \r\n\r\n// const addContact = createAction('contacts/add', (newName, number) => ({\r\n//   payload: {\r\n  //     id: uuidv4(),\r\n  //     name: newName, \r\n//     number,\r\n//   }\r\n// }))\r\n\r\n// import contactTypes from './contact-types';\r\n\r\n// const addContact = ( newName, number) => ({\r\n  //   type: contactTypes.ADD,\r\n  //   payload: {\r\n    // id: uuidv4(),\r\n    // name: newName, \r\n    // number,\r\n    //   }\r\n    // });\r\n    \r\n    // const deleteContact = (contactId) => ({\r\n      //   type: contactTypes.DELETE,\r\n      //   payload: contactId,\r\n      // });\r\n\r\n      // const changeFilter = (value) => ({\r\n        //   type: contactTypes.CHANGE_FILTER,\r\n        //   payload: value,\r\n        // })\r\n        ","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\nimport { fetchContactsRequest, fetchContactsSuccess, fetchContactsError, addContactRequest, addContactSuccess, addContactError, deleteContactRequest, deleteContactSuccess, deleteContactError, changeFilter } from './contacts-actions';\r\naxios.defaults.baseURL = 'https://614647788f2f4e001730401d.mockapi.io/api/v1';\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactsSuccess]: (state, {payload}) => payload,\r\n  [addContactSuccess]: (state, {payload}) => [payload, ...state],\r\n  [deleteContactSuccess]: (state, {payload}) => state.filter( ({id}) => id !==  payload),\r\n});\r\n\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, {payload}) => payload,\r\n});\r\n\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n})\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const items = (state = initialState, { type, payload }) => {\r\n//   switch( type ) {\r\n//     case types.ADD:\r\n//       return initialState.name === payload.name ? alert(`${payload.name} is already in contacts`) : [payload, ...state]\r\n\r\n//     case types.DELETE:\r\n//       return state.filter( ({id}) => id !==  payload)\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n  \r\n// };\r\n\r\n// const filter = (state = '', {type, payload}) => {\r\n  //   switch( type ) {\r\n    //     case types.CHANGE_FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getAllContacts = state => state.contacts.items;\r\n\r\nexport const getLoading = state => state.contacts.loading;\r\n\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = createSelector(\r\n  [getAllContacts,getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilterName = filter.toLowerCase().trim();\r\n    return contacts.filter( ({ name }) => name.toLowerCase().includes(normalizedFilterName));\r\n  },\r\n);\r\n  \r\n\r\n\r\n\r\n\r\n  // export const getVisibleContacts = state => {\r\n  //   const filter = getFilter(state);\r\n  //   const contacts = getAllContacts(state);\r\n  //   const normalizedFilterName = filter.toLowerCase().trim();\r\n  //   return contacts.filter( ({ name }) => name.toLowerCase().includes(normalizedFilterName));\r\n  // };\r\n\r\n// const getVisibleContacts = (allContacts, filter) => {\r\n//   const normalizedFilterName = filter.toLowerCase().trim();\r\n//   return allContacts.filter( ({ name }) => name.toLowerCase().includes(normalizedFilterName));\r\n// };","import axios from 'axios';\r\nimport { addContactRequest, addContactSuccess, addContactError, deleteContactRequest, deleteContactSuccess, deleteContactError, fetchContactsRequest, fetchContactsSuccess, fetchContactsError } from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'https://614647788f2f4e001730401d.mockapi.io/api/v1';\r\n\r\nexport const fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get('/contacts')\r\n\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error));\r\n  }\r\n};\r\n\r\nexport const addContact = (name, number) => dispatch => {\r\n  const contact = {\r\n    name, \r\n    number,\r\n  };\r\n\r\n  dispatch(addContactRequest());\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({data}) => dispatch(addContactSuccess(data)))\r\n    .catch(error => dispatch(addContactError(error)))\r\n};\r\n\r\nexport const deleteContact = id => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(deleteContactSuccess(id)))\r\n    .catch(error => dispatch(deleteContactError(error)))\r\n};","import axios from 'axios';\r\nimport { createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\r\n\r\nconst token = {\r\n  set(token) {\r\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n  },\r\n  unset() {\r\n    axios.defaults.headers.common.Authorization = '';\r\n  }\r\n}\r\n\r\nconst register = createAsyncThunk('auth/register', async credentials => {\r\n  try {\r\n    const { data } = await axios.post('/users/signup', credentials);\r\n    token.set(data.token);\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n});\r\n\r\nconst login = createAsyncThunk('auth/login', async credentials => {\r\n  try {\r\n    const { data } = await axios.post('/users/login', credentials);\r\n    token.set(data.token);\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n})\r\n\r\nconst logOut = createAsyncThunk('auth/logOut', async () => {\r\n  try {\r\n    await axios.post('/users/logout')\r\n    token.unset();\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n});\r\n\r\nconst getCurrentUser = createAsyncThunk('auth/refresh', async (_, thunkAPI) => {\r\n  const persistedToken = thunkAPI.getState().auth.token;\r\n\r\n  if (persistedToken === null) {\r\n    return thunkAPI.rejectWithValue()\r\n  };\r\n  \r\n  token.set(persistedToken);\r\n  try {\r\n    const { data } = await axios.get('/users/current');\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n});\r\n\r\nconst authOperations = {\r\n  register,\r\n  login,\r\n  logOut,\r\n  getCurrentUser,\r\n};\r\n\r\nexport default authOperations;","const getIsLoggedIn = state => state.auth.isLoggedIn;\r\n\r\nconst getUserName = state => state.auth.user.name;\r\n\r\nconst getIsFetchingCurrent = state => state.auth.isFetchingCurrentUser;\r\n\r\nconst authSelectors = {\r\n  getIsLoggedIn,\r\n  getUserName,\r\n  getIsFetchingCurrent\r\n};\r\n\r\nexport default authSelectors;","import { createSlice } from '@reduxjs/toolkit';\r\nimport authOperations from './auth-operations';\r\n\r\nconst initialState = {\r\n  user: { email: null, name: null },\r\n  token: null,\r\n  isLoggedIn: false,\r\n  isFetchingCurrentUser: false,\r\n};\r\n\r\nconst authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState,\r\n  extraReducers: {\r\n    [authOperations.register.fulfilled](state, action) {\r\n      state.user = action.payload.user;\r\n      state.token = action.payload.token;\r\n      state.isLoggedIn = true;\r\n    },\r\n    [authOperations.login.fulfilled](state, action) {\r\n    console.log(\"🚀 ~ file: auth-slice.js ~ line 21 ~ action\", action)\r\n      \r\n      state.user = action.payload.user;\r\n      state.token = action.payload.token;\r\n      state.isLoggedIn = true;\r\n    },\r\n    [authOperations.logOut.fulfilled](state) {\r\n      state.user = {email: null, name: null};\r\n      state.token = null;\r\n      state.isLoggedIn = false;\r\n    },\r\n    [authOperations.getCurrentUser.pending](state) {\r\n      state.isFetchingCurrentUser = true;\r\n    },\r\n    [authOperations.getCurrentUser.fulfilled](state, action) {\r\n      state.user = action.payload;\r\n      state.isLoggedIn = true;\r\n      state.isFetchingCurrentUser = false;\r\n    },\r\n    [authOperations.getCurrentUser.rejected](state) {\r\n      state.isFetchingCurrentUser = false;\r\n    },\r\n  },\r\n});\r\n\r\nexport default authSlice.reducer;","import { configureStore, getDefaultMiddleware} from '@reduxjs/toolkit';\r\nimport { persistReducer, persistStore, FLUSH, REHYDRATE, PAUSE,PERSIST,PURGE,REGISTER, } from 'redux-persist';\r\nimport logger from 'redux-logger';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nimport { contactsReducer } from './contacts';\r\nimport { authReducer } from './auth';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst authPersistConfig = {\r\n  key: 'auth',\r\n  storage,\r\n  whitelist: ['token'],\r\n}\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    auth: persistReducer(authPersistConfig, authReducer),\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n\r\n\r\n\r\n// const contactsPersistConfig = {\r\n  //   key: 'contacts',\r\n  //   storage,\r\n  //   blacklist: ['filter'],\r\n  // };\r\n  \r\n  // const persistor = persistStore(store);\r\n  \r\n  // const exportedObject = {store, persistor};\r\n\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactReducer,\r\n// });\r\n\r\n// const persistedReducer = persistReducer(contactsPersistConfig, rootReducer);\r\n\r\n// import { createStore, combineReducers } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n// const rootReducer = combineReducers({\r\n  //   contacts: contactReducer,\r\n// });\r\n\r\n\r\n","import { Route, Redirect } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { authSelectors } from 'redux/auth';\r\n\r\nconst PrivateRoute = ({ children, redirectTo = '/', ...routeProps }) => {\r\n  const isLoggedIn = useSelector(authSelectors.getIsLoggedIn);\r\n  return (\r\n    <Route {...routeProps}>\r\n      {isLoggedIn ? children : <Redirect to={redirectTo} />}\r\n    </Route>\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import { Route, Redirect } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { authSelectors } from 'redux/auth';\r\n\r\nconst PublicRoute = ({\r\n  children,\r\n  restricted = false,\r\n  redirectTo = '/',\r\n  ...routeProps\r\n}) => {\r\n  const isLoggedIn = useSelector(authSelectors.getIsLoggedIn);\r\n  const shouldRedirect = isLoggedIn && restricted;\r\n  return (\r\n    <Route {...routeProps}>\r\n      {shouldRedirect ? <Redirect to={redirectTo} /> : children}\r\n    </Route>\r\n  );\r\n};\r\n\r\nexport default PublicRoute;\r\n","import { NavLink } from 'react-router-dom';\r\n\r\nimport { useSelector } from 'react-redux';\r\nimport { authSelectors } from 'redux/auth';\r\n\r\nimport './Navigation.scss';\r\n\r\nconst Navigation = () => {\r\n  const isLoggedIn = useSelector(authSelectors.getIsLoggedIn);\r\n  return (\r\n    <nav>\r\n      <NavLink\r\n        exact\r\n        className=\"Navigation__link\"\r\n        to=\"/\"\r\n        activeStyle={{ color: 'red' }}\r\n      >\r\n        Home\r\n      </NavLink>\r\n      {isLoggedIn && (\r\n        <NavLink\r\n          className=\"Navigation__link\"\r\n          to=\"/contacts\"\r\n          activeStyle={{ color: 'red' }}\r\n        >\r\n          Phonebook\r\n        </NavLink>\r\n      )}\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import { NavLink } from 'react-router-dom';\r\n\r\nimport './AuthNav.scss';\r\n\r\nconst AuthNav = () => {\r\n  return (\r\n    <div className=\"AuthNav__container\">\r\n      <NavLink\r\n        className=\"AuthNav__link\"\r\n        to=\"/register\"\r\n        activeStyle={{ color: 'red' }}\r\n      >\r\n        Sign up\r\n      </NavLink>\r\n      <NavLink\r\n        className=\"AuthNav__link\"\r\n        to=\"/login\"\r\n        activeStyle={{ color: 'red' }}\r\n      >\r\n        Login\r\n      </NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AuthNav;\r\n","import { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { authSelectors, authOperations } from 'redux/auth';\r\n\r\nimport './UserMenu.scss';\r\n\r\nconst UserMenu = () => {\r\n  const dispatch = useDispatch();\r\n  const name = useSelector(authSelectors.getUserName);\r\n\r\n  return (\r\n    <div className=\"UserMenu__container\">\r\n      <span className=\"UserMenu__text\">Welcome, {name}</span>\r\n      <button\r\n        className=\"UserMenu__button\"\r\n        onClick={() => dispatch(authOperations.logOut())}\r\n      >\r\n        LogOut\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserMenu;\r\n","import { useSelector } from 'react-redux';\r\n\r\nimport Navigation from '../Navigation';\r\nimport AuthNav from '../AuthNav';\r\nimport UserMenu from '../UserMenu';\r\nimport { authSelectors } from 'redux/auth';\r\n\r\nimport './AppBar.scss';\r\n\r\nconst AppBar = () => {\r\n  const isLoggedIn = useSelector(authSelectors.getIsLoggedIn);\r\n  return (\r\n    <>\r\n      <header className=\"AppBar__header\">\r\n        <Navigation />\r\n        {isLoggedIn ? <UserMenu /> : <AuthNav />}\r\n      </header>\r\n      <hr></hr>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AppBar;\r\n","import { useEffect, Suspense, lazy } from 'react';\nimport { Switch } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\n// Components //\nimport { authOperations, authSelectors } from 'redux/auth';\nimport PrivateRoute from 'components/PrivateRoute';\nimport PublicRoute from 'components/PublicRoute';\nimport AppBar from 'components/AppBar';\nconst HomeView = lazy(() => import('./components/views/HomeView'));\nconst RegisterView = lazy(() => import('./components/views/RegisterView'));\nconst LoginView = lazy(() => import('./components/views/LoginView'));\nconst ContactsView = lazy(() => import('./components/views/ContactsView'));\n\nexport function App() {\n  const dispatch = useDispatch();\n  const isFetchingCurrentUser = useSelector(authSelectors.getIsFetchingCurrent);\n\n  useEffect(() =>{\n    dispatch(authOperations.getCurrentUser())\n  },[dispatch])\n\n  return (      \n    !isFetchingCurrentUser && (<div className=\"App\">\n      <AppBar />\n        <Suspense fallback={<p>Загрузка...</p>}>\n          <Switch>\n            <PublicRoute exact path=\"/\">\n              <HomeView />\n            </PublicRoute>\n            <PublicRoute exact path=\"/register\" restricted>\n              <RegisterView />\n            </PublicRoute>\n            <PublicRoute exact path=\"/login\" restricted redirectTo='/contacts'>\n              <LoginView />\n            </PublicRoute>\n          <PrivateRoute exact path=\"/contacts\" redirectTo=\"/login\">\n            <ContactsView />\n          </PrivateRoute>\n          </Switch>\n        </Suspense>\n    </div>\n    )\n  )\n};\n\nApp.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.shape()),\n  filter: PropTypes.string,\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport {store, persistor} from 'redux/store';\nimport { App } from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}