{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","components/Contacts/Contacts.jsx","components/views/ContactsView/ContactsView.jsx"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","ContactForm","useState","name","setName","number","setNumber","dispatch","useDispatch","contacts","useSelector","getAllContacts","handleChange","e","currentTarget","reset","className","onSubmit","preventDefault","some","contact","alert","addContact","type","onChange","pattern","title","required","Filter","filter","getFilter","contactsActions","changeFilter","target","Contact","id","getLoading","onClick","deleteContact","ContactList","map","Contacts","getVisibleContacts","useEffect","fetchContacts","ContactsView"],"mappings":"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","file":"static/js/3.dd05814c.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getAllContacts, addContact } from 'redux/contacts';\r\n// import { addContact } from 'redux/contacts/contacts-operations';\r\nimport './ContactForm.scss';\r\n\r\nfunction ContactForm() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(getAllContacts);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    switch(name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break; \r\n\r\n      default:\r\n        return;\r\n    };\r\n  };\r\n\r\n  const formSubmit = (e) => {\r\n    e.preventDefault();\r\n    const duplicateName = contacts.some(contact => contact.name === name);\r\n\r\n    if(duplicateName) {\r\n      alert(`${name} is already in contacts`);\r\n      reset();\r\n      return;\r\n    };\r\n    \r\n    dispatch(addContact(name, number));\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form className=\"Phonebook-form\" onSubmit={formSubmit}>         \r\n      <label className=\"Phonebook__label\">\r\n        Name:<br></br><input\r\n          className=\"Phonebook__input\"\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          onChange={handleChange}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Ім'я може складатись тільки з букв, апострофа, тире і пробілів. Наприклад Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan і т. п.\"\r\n          required\r\n        />\r\n      </label> \r\n      <label className=\"Phonebook__label\">\r\n        Number:<br></br><input\r\n          className=\"Phonebook__input\"\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={number}\r\n          onChange={handleChange}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Телефон повинен складатись з цифр і може містити пробіли, тире, круглі скобки і може починатися з + .\"\r\n          required\r\n        />\r\n      </label>\r\n      <button className=\"Phonebook__button\" type=\"submit\" >Add contact</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n\r\n// const mapStateToProps = (state) => ({\r\n//   contacts: state.contacts.items,\r\n// })\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   addContact: (newName, number) => dispatch(addContact(newName, number))\r\n// });","import { useDispatch, useSelector } from 'react-redux'\r\nimport { contactsActions, getFilter } from 'redux/contacts';\r\nimport PropTypes from 'prop-types';\r\nimport './Filter.scss';\r\n\r\nconst Filter = () => {\r\n  const dispatch = useDispatch();\r\n  const filter = useSelector(getFilter);\r\n\r\n  return (\r\n    <label className=\"Filter__label\">\r\n      Find contacts by name:<br></br><input\r\n        className=\"Filter__input\"\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={filter}\r\n        onChange={(e) => dispatch(contactsActions.changeFilter(e.target.value))}\r\n      />\r\n    </label> \r\n  );\r\n};\r\n\r\nexport default Filter;\r\n\r\nFilter.propTypes = {\r\n  dispatch: PropTypes.func,\r\n}\r\n\r\n// const mapStateToProps = ({contacts:{ filter }}) => ({\r\n//   filter,\r\n// })\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onChange: (e) => dispatch(contactsActions.changeFilter(e.target.value))\r\n// }) ","import './Contact.scss';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { deleteContact, getLoading } from 'redux/contacts';\r\n\r\nconst Contact = ({ name, number, id }) => {\r\n  const dispatch = useDispatch();\r\n  const isLoading = useSelector(getLoading);\r\n\r\n  return (\r\n    <li className=\"Contacts__item\">\r\n      <div className=\"Contacts__content\">\r\n        <p className=\"Contacts__text\">{name} :</p>\r\n        <p className=\"Contacts__text\">{number}</p>\r\n      </div>\r\n     \r\n      <button onClick={() => dispatch(deleteContact(id))} className=\"Contacts__button\">Delete</button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Contact;\r\n\r\nContact.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n};\r\n\r\n// {isLoading ? 'Deleting...' : 'Delete'}","import Contact from 'components/Contact';\r\n\r\nconst ContactList = ({contacts}) => (\r\n  <ul className=\"Contacts-list\">\r\n    {contacts.map( contact => (\r\n      <Contact key={contact.id} {...contact} />\r\n    ))}  \r\n  </ul>\r\n);\r\n\r\nexport default ContactList;","import { useEffect } from 'react';\r\nimport ContactList from 'components/ContactList';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchContacts, getVisibleContacts } from 'redux/contacts';\r\nimport PropTypes from 'prop-types';\r\nimport './Contacts.scss';\r\n\r\nconst Contacts = () => {\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(getVisibleContacts);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchContacts());\r\n  }, [dispatch])\r\n\r\n  return (\r\n    <>\r\n      <ContactList contacts={contacts}/>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default Contacts;\r\n\r\nContacts.propTypes = {\r\n  dispatch: PropTypes.func,\r\n};\r\n\r\n// const getVisibleContacts = (allContacts, filter) => {\r\n//   const normalizedFilterName = filter.toLowerCase().trim();\r\n//   return allContacts.filter( ({ name }) => name.toLowerCase().includes(normalizedFilterName));\r\n// };\r\n\r\n// const mapStateToProps = ({contacts: {items, filter}}) => ({\r\n//   contacts: getVisibleContacts(items, filter)\r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   // onDelete: (id) => dispatch(deleteContact(id)),\r\n//   fetchContacts: () => dispatch(fetchContacts()),\r\n// });","import ContactForm from 'components/ContactForm';\r\nimport Filter from 'components/Filter';\r\nimport Contacts from 'components/Contacts';\r\n\r\nconst ContactsView = () => {\r\n  return (\r\n    <>\r\n      <h1 className=\"Phonebook-title\">Phonebook</h1>\r\n      <ContactForm />\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <Contacts />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactsView;\r\n"],"sourceRoot":""}